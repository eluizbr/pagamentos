// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DocumentType {
  CPF
  CNPJ
}

enum UserType {
  PF
  PJ
}

enum TokenType {
  developement
  production
}

enum MecrchantStatus {
  active
  deleted
  pending
}

model User {
  id         String    @id @default(uuid()) @db.VarChar(255)
  username   String    @unique @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  profiles   Profile[]

}

model Profile {
  id            String       @id @default(uuid()) @db.VarChar(255)
  name          String       @db.VarChar(255)
  email         String       @unique @db.VarChar(255)
  document      String       @unique @db.VarChar(255)
  document_type DocumentType
  user_type     UserType
  phone         String       @db.VarChar(100)
  street        String       @db.VarChar(255)
  street_number String       @db.VarChar(255)
  complementary String       @db.VarChar(255)
  neighborhood  String       @db.VarChar(255)
  city          String       @db.VarChar(255)
  state         String       @db.VarChar(255)
  zipcode       String       @db.VarChar(8)
  country       String       @default("BR") @db.VarChar(255)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  merchant      Merchants[]
  user          User[]       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?      @db.VarChar(255)
  token         Token[]

  costumers Costumers[]

  cards   Cards[]
  charges Charges[]

  @@index([name, userId])
}

model Token {
  profile    Profile[] @relation(fields: [profileId], references: [id], onDelete: SetDefault)
  profileId  String?   @db.VarChar(255)
  id         String    @id @default(uuid()) @db.VarChar(255)
  type       TokenType
  token      String?   @unique @db.VarChar(255)
  client_id  String    @unique @default(cuid()) @db.VarChar(255)
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_in DateTime  @updatedAt

  @@index([profileId])
}

model Merchants {
  id         String          @id @default(uuid()) @db.VarChar(255)
  mcc        String          @db.VarChar(100)
  status     MecrchantStatus @default(pending)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  profile    Profile?        @relation(fields: [profileId], references: [id], onDelete: SetDefault)
  profileId  String          @db.VarChar(255)
  userId     String?         @db.VarChar(255)
  provider   Providers[]


  Charges Charges[]
  @@unique([profileId, mcc])
  @@index([profileId, status, mcc])
}

enum ProvidersEnum {
  pagarme
  pagseguro
}

model Providers {
  id          String        @id @default(uuid()) @db.VarChar(255)
  name        ProvidersEnum
  credentials Json          @db.Json
  priority    Int           @default(1)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  profileId   String?       @db.VarChar(255)
  userId      String?       @db.VarChar(255)
  merchantId  String        @db.VarChar(255)
  merchant    Merchants[]   @relation(fields: [merchantId], references: [id], onDelete: SetDefault)

}

enum costumerDocumentType {
  CPF
  CNPJ
}

model Costumers {
  id            String               @id @default(uuid()) @db.VarChar(255)
  name          String               @db.VarChar(255)
  phoneNumber   String               @db.VarChar(100)
  email         String               @db.VarChar(100)
  document      String               @unique @db.VarChar(25)
  document_type costumerDocumentType
  street        String               @db.VarChar(255)
  streetNumber  String               @db.VarChar(255)
  district      String               @db.VarChar(255)
  city          String               @db.VarChar(255)
  state         String               @db.VarChar(70)
  complement    String               @db.VarChar(255)
  zipCode       String               @db.VarChar(20)
  country       String               @db.VarChar(20)
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  profileId     String               @db.VarChar(255)
  profile       Profile[]            @relation(fields: [profileId], references: [id], onDelete: SetNull)

  cards Cards[]

  charges Charges[]
  @@unique([document, profileId])
  @@index([email])
}

enum CardsStatus {
  active
  failed
  pending
}

enum CardsBrand {
  electron
  maestro
  visa
  mastercard
  amex
  diners
  discover
  jcb
}

model Cards {
  id              String      @id @default(uuid()) @db.VarChar(255)
  cardId          String?     @db.VarChar(255)
  expirationMonth String      @db.VarChar(15)
  expirationYear  String      @db.VarChar(15)
  brand           String      @db.VarChar(50)
  last4digits     String      @db.VarChar(10)
  status          String      @db.VarChar(10)
  cvvChecked      CardsStatus @default(pending)
  created_at      DateTime    @default(now())
  costumerId      String      @db.VarChar(255)
  costumer        Costumers[] @relation(fields: [costumerId], references: [id], onDelete: Cascade)


  charges   Charges[]
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: SetDefault)
  profileId String?   @db.VarChar(255)
  @@index([brand, status])
}

enum paymentMethodType {
  boleto
  credit
  pix
}

model Charges {
  id                  String            @id @default(uuid()) @db.VarChar(255)
  amount              Int               @default(0)
  currency            String?           @db.VarChar(255)
  statementDescriptor String?           @db.VarChar(255)
  description         String?           @db.VarChar(255)
  orderId             String?           @db.VarChar(255)
  capture             Boolean?          @default(false)
  status              CardsStatus?      @default(pending)
  paymentMethod       paymentMethodType
  installments        Int?              @default(1)
  expiresDate         String?           @db.VarChar(15)
  instructions        String?           @db.VarChar(255)
  interestDays        Int?              @default(1)
  interestAmount      Decimal?          @default(0.0)
  interestPercentage  Int?              @default(0)
  fineDays            Int?              @default(1)
  fineAmount          Decimal?          @default(0.0)
  finePercentage      Int?              @default(0)



  transactions Transactions[]
  profile      Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String         @db.VarChar(255)
  merchant     Merchants?     @relation(fields: [merchantId], references: [id], onDelete: SetNull)
  merchantId   String         @db.VarChar(255)
  costumer     Costumers?     @relation(fields: [costumerId], references: [id], onDelete: SetDefault)
  costumerId   String         @db.VarChar(255)
  card         Cards?         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId       String         @db.VarChar(255)
}

model Transactions {
  id                       String  @id @default(uuid()) @db.VarChar(255)
  amount                   Decimal @default(0.0)
  currency                 String? @default("BRL") @db.VarChar(255)
  idempotencyKey           String  @db.VarChar(255)
  providerId               String  @db.VarChar(255)
  providerType             String  @db.VarChar(255)
  transactionId            String  @db.VarChar(255)
  authorizationNsu         String  @db.VarChar(255)
  status                   String  @db.VarChar(255)
  requestType              String  @db.VarChar(255)
  responseTs               String  @db.VarChar(255)
  networkAuthorizationCode String  @db.VarChar(255)
  networkResponseCode      String  @db.VarChar(255)

  charge   Charges[] @relation(fields: [chargeId], references: [id], onDelete: SetNull)
  chargeId String?   @db.VarChar(255)
}
